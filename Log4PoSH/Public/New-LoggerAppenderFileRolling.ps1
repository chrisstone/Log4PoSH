<#
.SYNOPSIS
Creates a new RollingFileAppender.

.DESCRIPTION
The New-LoggerAppenderFileRolling function creates a new RollingFileAppender using log4net.

.PARAMETER FileName
The name of the file to append to.

.PARAMETER CountDirection
Determines the count direction of the files generated by the rolling file appender.

.PARAMETER DatePattern
The date pattern to use for generating file names when rolling.

.PARAMETER DateTimeStrategy
The DateTimeStrategy for the rolling file appender.

.PARAMETER MaxFileSize
The maximum size that the output file is allowed to reach before being rolled over to backup files.

.PARAMETER MaxSizeRollBackups
The maximum number of backup files that are kept before the oldest is erased.

.PARAMETER RollingStyle
The rolling style for the rolling file appender.

.EXAMPLE
New-LoggerAppenderFileRolling -FileName "myLogFile.log" -CountDirection 1 -DatePattern "yyyy-MM-dd" -MaxFileSize "10MB" -MaxSizeRollBackups 5 -RollingStyle "Size"

This command creates a new RollingFileAppender that appends to the file "myLogFile.log", with a count direction of 1, a date pattern of "yyyy-MM-dd", a maximum file size of 10MB, a maximum of 5 backup files, and a rolling style of "Size".

.NOTES
This function is part of the Logging module. It requires the log4net library to be available in the domain.
#>
function New-LoggerAppenderFileRolling {
	Param (
		[Parameter(Mandatory = $true)]
		[string] $FileName,

		[Parameter(Mandatory = $false)]
		[int] $CountDirection,

		[Parameter(Mandatory = $false)]
		[string] $DatePattern,

		[Parameter(Mandatory = $false)]
		[string] $DateTimeStrategy,

		[Parameter(Mandatory = $false)]
		[string] $MaxFileSize,

		[Parameter(Mandatory = $false)]
		[int] $MaxSizeRollBackups,

		[Parameter(Mandatory = $false)]
		[ValidateSet("Composite", "Once", "Size", "Date")]
		[string] $RollingStyle
	)

	# Create a new RollingFileAppender
	$rollingFileAppender = New-Object log4net.Appender.RollingFileAppender

	# Set the file name
	$rollingFileAppender.File = $FileName

	# Set the CountDirection
	if ($null -ne $CountDirection) {
		$rollingFileAppender.CountDirection = $CountDirection
	}

	# Set the DatePattern
	if ($null -ne $DatePattern) {
		$rollingFileAppender.DatePattern = $DatePattern
	}

	# Set the DateTimeStrategy
	if ($null -ne $DateTimeStrategy) {
		$rollingFileAppender.DateTimeStrategy = $DateTimeStrategy
	}

	# Set the MaxFileSize
	if ($null -ne $MaxFileSize) {
		$rollingFileAppender.MaxFileSize = $MaxFileSize
	}

	# Set the MaxSizeRollBackups
	if ($null -ne $MaxSizeRollBackups) {
		$rollingFileAppender.MaxSizeRollBackups = $MaxSizeRollBackups
	}

	# Set the RollingStyle
	if ($null -ne $RollingStyle) {
		$rollingFileAppender.RollingStyle = $RollingStyle
	}

	# Activate the changes
	$rollingFileAppender.ActivateOptions()

	return $rollingFileAppender
}
Export-ModuleMember -Function New-LoggerAppenderFileRolling
